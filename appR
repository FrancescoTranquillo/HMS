#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

## app.R ##

library(shiny)
library(shinydashboard)
library (DT)
library (ggplot2)
library (plotly)


header<- dashboardHeader(
  title="SERENA",
  titleWidth = "40%"
)

## Sidebar content
Sidebar<-dashboardSidebar(  )


## Body content
body<-dashboardBody(
  
  #FIRST ROW
  fluidRow(
    
    box(fileInput("file1", "Choose patient data",
                  accept = c(
                    "text/csv",
                    "text/comma-separated-values,text/plain",
                    ".csv")
                )
        )
  ),
  
  
  #SECOND ROW
  fluidRow(
    
    box(plotlyOutput("plot1"), collapsible=TRUE
    ),
    
    box(selectInput('xcol', 'X Variable', "", selected = ""),
        selectInput('ycol', 'Y Variable', "", selected = ""))
  ),
  
  #THIRD ROW
  fluidRow(
    box(DTOutput("dati"), collapsible=TRUE, title = "Data",collapsed = TRUE
  )
  )
  
  )







ui <- dashboardPage(
  header,
  Sidebar,
  body
)


server <- shinyServer(function(input, output, session) {
  # added "session" because updateSelectInput requires it
  
  
  data <- reactive({
    
    req(input$file1) ## ?req #  require that the input is available
    
    inFile <- input$file1
    
    df <- read.csv(inFile$datapath, header = TRUE, sep = ";")
    
    
    
    DatesConv<-as.Date(df$Dates, format="%d/%m/%Y")
    
    updateSelectInput(session, inputId = 'xcol', label = 'X Variable',
                      choices = names(df), selected = names(df))
    updateSelectInput(session, inputId = 'ycol', label = 'Y Variable',
                      choices = names(df), selected = names(df)[2])


    
    
    
    return(df)

    
    
    
  })
  
    output$dati = renderDT(data())

  
    output$plot1 = renderPlotly({
      
      data<-data()
      time<-as.POSIXct(strptime(data$Dates,"%d/%m/%Y"))
      ggplotly(ggplot(data, aes( time, data$HeartRate, color=data$EMP_FiscalCode))+geom_line()+geom_point())
  })
  
  
  
})

shinyApp(ui, server)
