install.packages("C:/Users/Fra/Downloads/mstate_0.2.6.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Fra/Downloads/mstate_0.2.10.tar.gz", repos = NULL, type = "source")
install.packages('mstate', repos='http://cran.us.r-projec
install.packages('mstate', repos='http://cran.us.r-project.org'
install.packages('mstate', repos='http://cran.us.r-project.org'
help Markov
help markov
help (Markov)
??Markov
install.packages('mstate', repos='http://cran.us.r-project.org')
??Markov
help (Markov)
function modelparam.R
function modelparam.R.
modelparam
modelparam.R
data(aidissi)
data(aidssi)
modelparam
mstate
library("mstate", lib.loc="~/R/win-library/3.4")
mstate
library("boot", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("utils", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("nlme", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("RColorBrewer", lib.loc="~/R/win-library/3.4")
library("class", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("cluster", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("codetools", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("compiler", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("foreign", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("graphics", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("grDevices", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("grid", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("lattice", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("MASS", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("mgcv", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("stats", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("stats4", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("splines", lib.loc="C:/Program Files/R/R-3.4.2/library")
PSAprob
ptm <- proc.time() #start counting the time it takes
msample
setwd("C:/CEA with R tutorial")
install.packages("mstate")
install.packages("mstate")
POS1 <- read.delim2("C:/Users/Fra/Pictures/POS.tsv")
View(POS1)
## MODIFIBLE ARGUMENTS:
## Markov       EITHER TRUE OR FALSE, FOR A MARKOV OR SEMI-MARKOV MODEL RESPECTIVELY
## covs         VARIABLE NAMES FOR THE COVARIATES
## transnum     TRANSITION NUMBER OF INTEREST
## dist         DISTRIBUTION TO USE. OPTIONS ARE:
##              wei FOR WEIBULL, exp FOR EXPONENTIAL, gom FOR GOMPERTZ,
##              logl FOR LOGLOGISTIC,logn FOR LOGNORMAL AND gam FOR GENERALISED GAMMA
## data         DATASET TO USE FOR MODELLING
##========================================================================================
modelparam<-function(Markov=FALSE,covs="treat", transnum=3, dist="wei", data=msmcancer) {
##### set up models
if (Markov==TRUE){
fmla<-as.formula(paste("Surv(Tstart,Tstop,status)~ ",paste(covs, collapse= "+")))
}
if (Markov==FALSE){
fmla<-as.formula(paste("Surv(time,status)~ ",paste(covs, collapse= "+")))
}
datasub<-subset(data,trans==transnum)
if (dist=="wei") model<-phreg(fmla,dist="weibull", data=datasub)
if (dist=="exp") model<-phreg(fmla,dist="weibull", shape=1, data=datasub)
if (dist=="gom") model<-phreg(fmla,dist="gompertz", param="rate", data=datasub)
if (dist=="logl") model<-aftreg(fmla,dist="loglogistic", data=datasub)
if (dist=="logn") model<-aftreg(fmla,dist="lognormal", data=datasub)
if (dist=="gam") model<-flexsurvreg(fmla,dist="gengamma", data=datasub)
return(model)
}
View(modelparam)
POS1<-read.csv(POS1)
View(POS1)
getwd()
getwd()
read.csv(“POS.csv”, stringAsFactors = FALSE)
read.csv(“POS.csv”, stringAsFactors = FALSE)
path <- file.path(“~”,”datasets”,”myfile.csv”)
#set your path if different from you wd
> path
> read.csv(path, stringAsFactors = FALSE)
#use the path var instead of writing the whole path
> df <- read.csv(“myfile.csv”, stringAsFactors = FALSE)
> df
> str(df)
path <- file.path(“~”,”data”,”pos.csv”)
help path
help file.path()
help("file.path")
path <- file.path("C:\Users\Fra\Documents\Università\Data" "pos.tsv", )
path <- file.path("C:\Users\Fra\Documents\Università\Data", "pos.tsv" )
path <- file.path("C:\Users\Fra\Documents\Università\Data" "pos.tsv" )
getwd()
pos2<-read.csv("POS2.csv")
pos2<-read.csv("POS2.csv", stringsAsFactors = FALSE)
pos<-read.csv("POS.tsv", stringsAsFactors = FALSE)
read.table(file = 'POS.tsv', sep = '\t', header = TRUE)
pos2<-read.table(file = 'POS.tsv', sep = '\t', header = TRUE)
modelparam(Markov = FALSE, covs= "treat", transnum = 3, dist="wei", data="pos2")
modelparam(Markov = FALSE, covs= "treat",  dist="wei", data="pos2")
View(modelparam)
weimodel_pps <-phreg (Surv(time,status)~ treat
,dist="weibull",data=msmcancer3) ; weimodel_pps
modelparam(Markov = FALSE, covs= "treat", transnum = 1, dist="wei", data="pos2")
subset(pos2)
help(phreg)
??phreg
phreg
??eha
install.packages("eha", repos='http://cran.rstudio.com/')
load("~/Università/Funzioni/allcombos.RData")
ptm <- proc.time() #start counting the time it takes
View(CEplane)
CEplane<-function(x=incQALY, y=incCost, xlower=-2, xupper=2,
ylower=0, yupper=20000, ICER=30000, text="ICER= £30,000"){
plot(x,y,xlim=c(xlower,xupper), ylim=c(ylower,yupper),
xlab="Incremental QALY", ylab="Incremental Cost (£)")
abline(v=0,lty=3)
abline(h=0,lty=3)
if(is.na(ICER)==0) abline(0,ICER)
if (is.na(ICER)==0)text(xupper-0.75, yupper, text)
}
## xupper      UPPER LIMIT FOR THE HORIZONTAL AXIS
## ylower      LOWER LIMIT FOR THE VERTICAL AXIS
## yupper      UPPER LIMIT FOR THE VERTICAL AXIS
## QALY1       NAME OF VARIABLE CONTAINING THE INCREMENTAL QALY FOR TREATMENT ARM 1
##             (DERIVED USING THE PSAQALY FUNCTION)
## QALY2       NAME OF VARIABLE CONTAINING THE INCREMENTAL QALY FOR TREATMENT ARM 2
##             (DERIVED USING THE PSAQALY FUNCTION)
## cost1       NAME OF VARIABLE CONTAINING THE TOTAL EXPECTED COSTS FOR TREATMENT ARM 1
## cost2       NAME OF VARIABLE CONTAINING THE TOTAL EXPECTED COSTS FOR TREATMENT ARM 2
##========================================================================================
CEAC<-function(cRatiosim=c(seq(0,1000,100), seq(1500,5000,500),
seq(6000,30000,1000), seq(35000,100000,5000)),
nruns=1000,nruns2=1000, xlower=0, xupper=100000, ylower=0, yupper=1,
QALY1=QALY_RFC_dis, QALY2=QALY_FC_dis,
cost1=total_cost_RFC_dis, cost2=total_cost_FC_dis,
secondcurve=TRUE, QALY1_2=QALY_RFC_dis, QALY2_2=QALY_FC_dis,
cost1_2=total_cost_RFC_dis, cost2_2=total_cost_FC_dis){
### store incremental net monetary benefit for each draw
incNMBsim<-matrix(nrow=nruns, ncol=length(cRatiosim))
### store cost-effective indicator for each draw
is.cost.effsim<-matrix(rep(0, nruns*length(cRatiosim)),
nrow=nruns, ncol=length(cRatiosim))
### store mean of indicators
### i.e. the probability treatment is cost effective
meanicesim<-rep(NA,length(cRatiosim))
for (i in 1:length(cRatiosim)) {
incNMBsim[,i]<-(QALY1*cRatiosim[i] - cost1)-
(QALY2*cRatiosim[i] - cost2)
}
for (j in 1:length(cRatiosim)) {
for (i in 1:nruns) {
is.cost.effsim[i,j][incNMBsim[i,j]>0] <-1
}}
for (i in 1:length(cRatiosim)) {
meanicesim[i]<-mean(is.cost.effsim[,i])
}
options(scipen = 3)
plot(cRatiosim,meanicesim, type="l", xlim=c(xlower,xupper), ylim=c(ylower,yupper),
xlab="Value of ceiling ratio (£)",
ylab="Probability of being cost-effective ")
if (secondcurve==TRUE){
### store incremental net monetary benefit for each draw
incNMBsim2<-matrix(nrow=nruns2, ncol=length(cRatiosim))
### store cost-effective indicator for each draw
is.cost.effsim2<-matrix(rep(0, nruns2*length(cRatiosim)),
nrow=nruns2, ncol=length(cRatiosim))
### store mean of indicators
### i.e. the probability treatment is cost effective
meanicesim2<-rep(NA,length(cRatiosim))
for (i in 1:length(cRatiosim)) {
incNMBsim2[,i]<-(QALY1_2*cRatiosim[i] - cost1_2)-
(QALY2_2*cRatiosim[i] - cost2_2)
}
for (j in 1:length(cRatiosim)) {
for (i in 1:nruns2) {
is.cost.effsim2[i,j][incNMBsim2[i,j]>0] <-1
}}
for (i in 1:length(cRatiosim)) {
meanicesim2[i]<-mean(is.cost.effsim2[,i])
}
lines(cRatiosim,meanicesim2, type="l",lty=2)
}
}
aic<- -2*weimodel_pps$loglik[2]+2*nrow(weimodel_pps$var);aic
load("allcombos.RData")
install.packages(c("stringi", "stringr"))
install.packages("shiny")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='francescotranquillo', token='CDB49E1CDC86A1A3A07304188654CBC3', secret='lOzdE88XaHPXnzDgIjxX7VfYHhbzD2Ko3PuRZCD8')
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shinydashboard")
source('~/.active-rstudio-document', echo=TRUE)
install.packages(DT)
install.packages("dtables")
source('~/.active-rstudio-document', echo=TRUE)
install.packages('DT')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
library(reshape2)
library(dplyr)
library(ggplot2)
library(plotly)
install.packages("plotly")
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
library(shiny)
library(shinydashboard)
library (DT)
library (ggplot2)
library (plotly)
library(reshape2)
install.packages("dplyr")
install.packages("plotly")
Sys.getenv("R_LIBS_USER")
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
library(data.table)
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
rm(list=ls())
setwd("C:\\Users\\Public\\Documents\\HMS")
getwd()
library(ggplot2)
library(plotly)
library(reshape2)
library(dplyr)
library(data.table)
df<-read.csv("data.csv", sep = ";", header= TRUE)
df
df<- mutate(df, Dates=as.Date(df$Date, "%d/%m/%Y"))
df[2]<-NULL
df
user<-"Gian"
mydata<-as_data_frame(df)
View(mydata)
mydata2<-as.data.frame(df)
View(mydata2)
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
